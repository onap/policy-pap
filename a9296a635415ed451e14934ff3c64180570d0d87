{
  "comments": [
    {
      "key": {
        "uuid": "41f2356f_99d00967",
        "filename": "main/src/main/java/org/onap/policy/pap/main/rest/PolicyComponentsHealthCheckProvider.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-25T13:43:53Z",
      "side": 1,
      "message": "knowing a little more about java\u0027s asynchronous threads, this parallelStream() call needs to be done a different way, because it will block the ForkJoinPool while it performs the REST calls - should never do blocking I/O in a parallelStream()\n\nnow that I think about it, this should only invoke getHttpClients() once and then cache the result, reusing it on each call to fetch().",
      "revId": "a9296a635415ed451e14934ff3c64180570d0d87",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ac88bd7_53547e5e",
        "filename": "main/src/main/java/org/onap/policy/pap/main/rest/PolicyComponentsHealthCheckProvider.java",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-25T13:53:32Z",
      "side": 1,
      "message": "Can you outline the workings of a few things here: \n- what components use http for the healthcheck?  \n- How does this work for the parallel stream, \n- if executed in parallel, how does the result get put together uniformly for all components?   \n- why the reference to itself in this method?",
      "revId": "a9296a635415ed451e14934ff3c64180570d0d87",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f88db93_7a501efe",
        "filename": "main/src/main/java/org/onap/policy/pap/main/rest/PolicyComponentsHealthCheckProvider.java",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-25T13:43:53Z",
      "side": 1,
      "message": "shouldn\u0027t do this - because the factory is a singleton, it will impact anything else using managed HttpClients",
      "revId": "a9296a635415ed451e14934ff3c64180570d0d87",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb36087e_6d8c2c3b",
        "filename": "main/src/main/java/org/onap/policy/pap/main/rest/PolicyComponentsHealthCheckProvider.java",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-25T13:53:32Z",
      "side": 1,
      "message": "Is this right to destroy the factory each time the health status need to be exercised?   If so, it must be masking a bug.",
      "revId": "a9296a635415ed451e14934ff3c64180570d0d87",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4de3a16_61c2e65f",
        "filename": "main/src/main/java/org/onap/policy/pap/main/rest/PolicyComponentsHealthCheckProvider.java",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-25T13:43:53Z",
      "side": 1,
      "message": "shouldn\u0027t assume that all clients in the factory are clients of interest to health check.  Need to create a list from those returned by build()",
      "revId": "a9296a635415ed451e14934ff3c64180570d0d87",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffc33317_15ba89d2",
        "filename": "main/src/main/java/org/onap/policy/pap/main/rest/PolicyComponentsHealthCheckProvider.java",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-25T13:53:32Z",
      "side": 1,
      "message": "can you remind me what is for the \"replaceIpWithHostname\" ?",
      "revId": "a9296a635415ed451e14934ff3c64180570d0d87",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4a0e1_a75386f5",
        "filename": "main/src/test/java/org/onap/policy/pap/main/rest/TestPolicyComponentsHealthCheckControllerV1.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-25T13:43:53Z",
      "side": 1,
      "message": "need an @After or @AfterClass to restore the parameters to their original value",
      "revId": "a9296a635415ed451e14934ff3c64180570d0d87",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8e25ad4_e205e66b",
        "filename": "main/src/test/java/org/onap/policy/pap/main/rest/TestPolicyComponentsHealthCheckProvider.java",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-25T13:43:53Z",
      "side": 1,
      "message": "FYI: could make this static",
      "revId": "a9296a635415ed451e14934ff3c64180570d0d87",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}